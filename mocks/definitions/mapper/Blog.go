// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	model "go-api/definitions/model"

	mock "github.com/stretchr/testify/mock"

	request "go-api/definitions/request"

	response "go-api/definitions/response"
)

// Blog is an autogenerated mock type for the Blog type
type Blog struct {
	mock.Mock
}

// CreateRequestToModel provides a mock function with given fields: req
func (_m *Blog) CreateRequestToModel(req request.BlogCreate) model.Blog {
	ret := _m.Called(req)

	var r0 model.Blog
	if rf, ok := ret.Get(0).(func(request.BlogCreate) model.Blog); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(model.Blog)
	}

	return r0
}

// DeleteRequestToModel provides a mock function with given fields: req
func (_m *Blog) DeleteRequestToModel(req request.BlogDelete) model.Blog {
	ret := _m.Called(req)

	var r0 model.Blog
	if rf, ok := ret.Get(0).(func(request.BlogDelete) model.Blog); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(model.Blog)
	}

	return r0
}

// ListRequestToFilter provides a mock function with given fields: req
func (_m *Blog) ListRequestToFilter(req request.BlogList) model.BlogFilter {
	ret := _m.Called(req)

	var r0 model.BlogFilter
	if rf, ok := ret.Get(0).(func(request.BlogList) model.BlogFilter); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(model.BlogFilter)
	}

	return r0
}

// ModelToListResponse provides a mock function with given fields: _a0
func (_m *Blog) ModelToListResponse(_a0 []model.Blog) response.BlogList {
	ret := _m.Called(_a0)

	var r0 response.BlogList
	if rf, ok := ret.Get(0).(func([]model.Blog) response.BlogList); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(response.BlogList)
		}
	}

	return r0
}

// ModelToResponse provides a mock function with given fields: _a0
func (_m *Blog) ModelToResponse(_a0 model.Blog) response.Blog {
	ret := _m.Called(_a0)

	var r0 response.Blog
	if rf, ok := ret.Get(0).(func(model.Blog) response.Blog); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(response.Blog)
	}

	return r0
}

// UpdateRequestToModel provides a mock function with given fields: req
func (_m *Blog) UpdateRequestToModel(req request.BlogUpdate) model.Blog {
	ret := _m.Called(req)

	var r0 model.Blog
	if rf, ok := ret.Get(0).(func(request.BlogUpdate) model.Blog); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(model.Blog)
	}

	return r0
}

type mockConstructorTestingTNewBlog interface {
	mock.TestingT
	Cleanup(func())
}

// NewBlog creates a new instance of Blog. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBlog(t mockConstructorTestingTNewBlog) *Blog {
	mock := &Blog{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
