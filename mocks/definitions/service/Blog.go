// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	request "go-api/definitions/request"

	mock "github.com/stretchr/testify/mock"

	response "go-api/definitions/response"
)

// Blog is an autogenerated mock type for the Blog type
type Blog struct {
	mock.Mock
}

// Create provides a mock function with given fields: create
func (_m *Blog) Create(create request.BlogCreate) (response.Blog, error) {
	ret := _m.Called(create)

	var r0 response.Blog
	if rf, ok := ret.Get(0).(func(request.BlogCreate) response.Blog); ok {
		r0 = rf(create)
	} else {
		r0 = ret.Get(0).(response.Blog)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(request.BlogCreate) error); ok {
		r1 = rf(create)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: req
func (_m *Blog) Delete(req request.BlogDelete) error {
	ret := _m.Called(req)

	var r0 error
	if rf, ok := ret.Get(0).(func(request.BlogDelete) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: req
func (_m *Blog) List(req request.BlogList) (response.BlogList, error) {
	ret := _m.Called(req)

	var r0 response.BlogList
	if rf, ok := ret.Get(0).(func(request.BlogList) response.BlogList); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(response.BlogList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(request.BlogList) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: req
func (_m *Blog) Update(req request.BlogUpdate) (response.Blog, error) {
	ret := _m.Called(req)

	var r0 response.Blog
	if rf, ok := ret.Get(0).(func(request.BlogUpdate) response.Blog); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(response.Blog)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(request.BlogUpdate) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewBlog interface {
	mock.TestingT
	Cleanup(func())
}

// NewBlog creates a new instance of Blog. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBlog(t mockConstructorTestingTNewBlog) *Blog {
	mock := &Blog{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
